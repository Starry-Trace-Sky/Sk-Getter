# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

"""
 
author: Skyler Sun
create date: 2022-12-05 Monday
weather: small rain
script name: download.py

"""

import sys
from re import match
from time import sleep
from webbrowser import open as webOpen
from subprocess import Popen, CREATE_NO_WINDOW

from showTk import showTk
from win_setting import SettingWindow
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QThread, pyqtSignal
from query import query_config, update_config
from win_progress import Ui_BilibiliWin


class BilibiliThread(QThread):
    dataSignal = pyqtSignal(tuple)
    hideSignal = pyqtSignal(bool)
    def __init__(self) -> None:
        super().__init__()
    
    def run(self):
        # 初始化
        update_config('d/config/download.json', 'value', 0)
        downloadtype = query_config('d/config/settings.json')['videoType']
        if downloadtype == 'bilibili':
            oldMax = query_config('d/config/download.json')['max']
            count = 0
            while True:
                downloadData = query_config('d/config/download.json')
                if downloadData != None:
                    downloadMax = downloadData['max']
                    downloadValue = downloadData['value']
                    if oldMax != downloadMax:
                        count += 1
                    if downloadValue < downloadMax:
                        self.dataSignal.emit((downloadMax, downloadValue))
                    else:
                        if count == 2:
                            self.hideSignal.emit(True)
                            break
                    oldMax = downloadMax
                sleep(0.1)
        elif downloadtype != 'cloudmusic':
            while True:
                downloadData = query_config('d/config/download.json')
                if downloadData != None:
                    downloadMax = downloadData['max']
                    downloadValue = downloadData['value']
                    if downloadValue < downloadMax:
                        self.dataSignal.emit((downloadMax, downloadValue))
                    else:
                        self.hideSignal.emit(True)
                        break
                sleep(0.1)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.folderPath = query_config('d/config/settings.json')['save_path']
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(481, 240)
        MainWindow.setMinimumSize(QtCore.QSize(10, 10))
        MainWindow.setMaximumSize(QtCore.QSize(9999, 9999))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("img/icon.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.VideoLabel = QtWidgets.QLabel(self.centralwidget)
        self.VideoLabel.setGeometry(QtCore.QRect(10, 30, 101, 51))
        self.VideoLabel.setObjectName("VideoLabel")
        self.DownloadVideoButton = QtWidgets.QPushButton(self.centralwidget)
        self.DownloadVideoButton.setGeometry(QtCore.QRect(380, 30, 81, 31))
        self.DownloadVideoButton.setObjectName("DownloadVideoButton")
        self.MusicLabel = QtWidgets.QLabel(self.centralwidget)
        self.MusicLabel.setGeometry(QtCore.QRect(10, 120, 101, 51))
        self.MusicLabel.setObjectName("MusicLabel")
        self.DownloadMusicButton = QtWidgets.QPushButton(self.centralwidget)
        self.DownloadMusicButton.setGeometry(QtCore.QRect(380, 120, 81, 31))
        self.DownloadMusicButton.setObjectName("DownloadMusicButton")
        self.VideoLinkInput = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.VideoLinkInput.setGeometry(QtCore.QRect(130, 20, 231, 71))
        self.VideoLinkInput.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.VideoLinkInput.setObjectName("VideoLinkInput")
        self.MusicLinkInput = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.MusicLinkInput.setGeometry(QtCore.QRect(130, 110, 231, 71))
        self.MusicLinkInput.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.MusicLinkInput.setObjectName("MusicLinkInput")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 481, 23))
        self.menubar.setObjectName("menubar")
        self.MenuSettings = QtWidgets.QMenu(self.menubar)
        self.MenuSettings.setToolTipsVisible(False)
        self.MenuSettings.setObjectName("MenuSettings")
        self.MenuHelp = QtWidgets.QMenu(self.menubar)
        self.MenuHelp.setObjectName("MenuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.ActionAbout = QtWidgets.QAction(MainWindow)
        self.ActionAbout.setObjectName("ActionAbout")
        self.ActionSettingDashborad = QtWidgets.QAction(MainWindow)
        self.ActionSettingDashborad.setIconVisibleInMenu(True)
        self.ActionSettingDashborad.setShortcutVisibleInContextMenu(True)
        self.ActionSettingDashborad.setObjectName("ActionSettingDashborad")
        self.ActionAddress = QtWidgets.QAction(MainWindow)
        self.ActionAddress.setObjectName("ActionAddress")
        self.ActionUpdateApi = QtWidgets.QAction(MainWindow)
        self.ActionUpdateApi.setObjectName("ActionUpdateApi")
        self.MenuSettings.addAction(self.ActionSettingDashborad)
        self.MenuSettings.addAction(self.ActionUpdateApi)
        self.MenuHelp.addAction(self.ActionAddress)
        self.MenuHelp.addSeparator()
        self.MenuHelp.addAction(self.ActionAbout)
        self.menubar.addAction(self.MenuSettings.menuAction())
        self.menubar.addAction(self.MenuHelp.menuAction())

        # 设置默认显示文字
        self.VideoLinkInput.setPlaceholderText('请输入视频链接')
        self.MusicLinkInput.setPlaceholderText('请输入歌曲链接')
        # 信号连接
        self.ActionAbout.triggered.connect(self.about)
        self.ActionAddress.triggered.connect(self.about)
        self.ActionSettingDashborad.triggered.connect(self.setting)
        self.ActionUpdateApi.triggered.connect(self.update_own)
        self.DownloadMusicButton.clicked.connect(self.D_music)
        self.DownloadVideoButton.clicked.connect(self.D_video)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Sk Getter"))
        self.VideoLabel.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:11pt;\">下载视频</span></p></body></html>"))
        self.DownloadVideoButton.setText(_translate("MainWindow", "开始下载"))
        self.MusicLabel.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:11pt;\">下载歌曲</span></p></body></html>"))
        self.DownloadMusicButton.setText(_translate("MainWindow", "开始下载"))
        self.MenuSettings.setTitle(_translate("MainWindow", "设置"))
        self.MenuHelp.setTitle(_translate("MainWindow", "帮助"))
        self.ActionAbout.setText(_translate("MainWindow", "关于"))
        self.ActionSettingDashborad.setText(_translate("MainWindow", "全局设置"))
        self.ActionAddress.setText(_translate("MainWindow", "软件地址"))
        self.ActionUpdateApi.setText(_translate("MainWindow", "更新软件"))

    def about(self):
        """打开浏览器访问主页"""
        url = 'https://gitee.com/skyler-sun/Sk-Getter'
        webOpen(url)

    def setting(self):
        """打开设置窗口"""
        SettingWindow.show()

    def update_own(self):
        """更新软件"""
        #TODO:更新软件
        pass

    def D_music(self):
        """下载音乐"""
        self.folderPath = query_config('d/config/settings.json')['save_path']
        self.musicUrl = self.MusicLinkInput.toPlainText()
        if self.musicUrl == '':
            showTk(1, '警告', '@^_^@歌曲链接不能为空')
        elif match('https://music.163.com', self.musicUrl):
            # 判断为网易云音乐链接
            update_config('d/config/settings.json', 'videoType', 'cloudmusic')
            update_config('d/config/settings.json', 'videoUrl', self.musicUrl)
            Popen(f'd/download.exe', creationflags=CREATE_NO_WINDOW)
    
    def open_save(self):
        """打开保存位置"""
        self.folderPath = self.folderPath.replace('/', '\\')
        Popen(f'explorer.exe {self.folderPath}', creationflags=CREATE_NO_WINDOW)
    
    def upProgressBar(self, dataTuple):
        """更新进度条显示"""
        self.progressUi.setProgressMax(dataTuple[0])
        self.progressUi.setProgressValue(dataTuple[1])
        
    def hideProgressBar(self, hideStatus):
        """隐藏进度条"""
        if hideStatus:
            self.BilibiliWin.destroy()
    
    def D_video(self):
        """下载视频"""
        self.folderPath = query_config('d/config/settings.json')['save_path']
        self.videoUrl = self.VideoLinkInput.toPlainText()
        if self.videoUrl == '':
            showTk(1, '警告', '@^_^@ 视频链接不能为空')
            
        elif match('https://www.bilibili.com', self.videoUrl):
            # 判断为bilibili链接
            update_config('d/config/settings.json', 'videoType', 'bilibili')
            update_config('d/config/settings.json', 'videoUrl', self.videoUrl)                    
            Popen(f'd/download.exe', creationflags=CREATE_NO_WINDOW)
            self.BilibiliWin = QtWidgets.QWidget()
            self.progressUi = Ui_BilibiliWin()
            self.progressUi.setupUi(self.BilibiliWin)
            bth = BilibiliThread()
            bth.dataSignal.connect(self.upProgressBar)
            bth.hideSignal.connect(self.hideProgressBar)
            bth.start()
            self.BilibiliWin.show()
            bth.exec()
            
        elif match('https://v.qq.com', self.videoUrl):
            # 判断为腾讯视频链接
            if showTk(3, '提示', '^_^ 检测为腾讯视频,如果您已经配置好webdriver,点击是开始下载'):
                update_config('d/config/settings.json', 'videoType', 'tencent')
                update_config('d/config/settings.json', 'videoUrl', self.videoUrl)
                Popen(f'd/download.exe', creationflags=CREATE_NO_WINDOW)
                self.BilibiliWin = QtWidgets.QWidget()
                self.progressUi = Ui_BilibiliWin()
                self.progressUi.setupUi(self.BilibiliWin)
                bth = BilibiliThread()
                bth.dataSignal.connect(self.upProgressBar)
                bth.hideSignal.connect(self.hideProgressBar)
                bth.start()
                self.BilibiliWin.show()
                bth.exec()
            
        elif match('https://www.mgtv.com', self.videoUrl):
            # 判断为芒果TV链接
            if showTk(3, '提示', '^_^ 检测为芒果TV,如果您已经配置好webdriver,点击是开始下载'):
                update_config('d/config/settings.json', 'videoType', 'mgtv')
                update_config('d/config/settings.json', 'videoUrl', self.videoUrl)
                Popen(f'd/download.exe', creationflags=CREATE_NO_WINDOW)
                self.BilibiliWin = QtWidgets.QWidget()
                self.progressUi = Ui_BilibiliWin()
                self.progressUi.setupUi(self.BilibiliWin)
                bth = BilibiliThread()
                bth.dataSignal.connect(self.upProgressBar)
                bth.hideSignal.connect(self.hideProgressBar)
                bth.start()
                self.BilibiliWin.show()
                bth.exec()


app = QtWidgets.QApplication(sys.argv)
MainWindow = QtWidgets.QMainWindow()
with open('style.qss') as f:
    style = f.read()
MainWindow.setStyleSheet(style)
ui = Ui_MainWindow()
ui.setupUi(MainWindow)

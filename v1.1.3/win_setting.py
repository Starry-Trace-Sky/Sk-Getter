# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'setting.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

"""
 
author: Skyler Sun
create date: 2022-12-05 Monday
weather: small rain
script name: download.py

"""

import sys
from subprocess import call, CREATE_NO_WINDOW
from os import mkdir
from os.path import exists
from tkinter import Tk
from threading import Thread
from tkinter.filedialog import askdirectory

from query import query_config, update_config
from showTk import showTk
from autoWebdriver import autoWebdriver
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_SettingWindow(object):
    def setupUi(self, SettingWindow):
        SettingWindow.setObjectName("SettingWindow")
        SettingWindow.resize(422, 126)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("img/icon.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        SettingWindow.setWindowIcon(icon)
        self.textBrowser = QtWidgets.QTextBrowser(SettingWindow)
        self.textBrowser.setGeometry(QtCore.QRect(80, 20, 231, 41))
        self.textBrowser.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.textBrowser.setObjectName("textBrowser")
        self.label = QtWidgets.QLabel(SettingWindow)
        self.label.setGeometry(QtCore.QRect(10, 30, 61, 21))
        self.label.setObjectName("label")
        self.SetSavePathButton = QtWidgets.QPushButton(SettingWindow)
        self.SetSavePathButton.setGeometry(QtCore.QRect(320, 25, 91, 30))
        self.SetSavePathButton.setObjectName("SetSavePathButton")
        self.splitter = QtWidgets.QSplitter(SettingWindow)
        self.splitter.setGeometry(QtCore.QRect(10, 70, 401, 41))
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")
        self.OpenSaveButton = QtWidgets.QPushButton(self.splitter)
        self.OpenSaveButton.setObjectName("OpenSaveButton")
        self.QueryHistoryButton = QtWidgets.QPushButton(self.splitter)
        self.QueryHistoryButton.setObjectName("QueryHistoryButton")
        self.QueryApiButton = QtWidgets.QPushButton(self.splitter)
        self.QueryApiButton.setObjectName("QueryApiButton")

        # 默认显示
        self.config = query_config('d/config/settings.json')
        if 'save_path' in self.config:
            self.textBrowser.clear()
            self.textBrowser.append(self.config['save_path'])
        # 信号连接函数
        self.QueryApiButton.clicked.connect(self.configWebdriver)
        self.QueryHistoryButton.clicked.connect(self.query_history)
        self.OpenSaveButton.clicked.connect(self.open_save)
        self.SetSavePathButton.clicked.connect(self.set_save)

        self.retranslateUi(SettingWindow)
        QtCore.QMetaObject.connectSlotsByName(SettingWindow)

    def retranslateUi(self, SettingWindow):
        _translate = QtCore.QCoreApplication.translate
        SettingWindow.setWindowTitle(_translate("SettingWindow", "全局设置"))
        self.label.setText(_translate("SettingWindow", "<html><head/><body><p><span style=\" font-size:11pt;\">保存路径</span></p></body></html>"))
        self.SetSavePathButton.setText(_translate("SettingWindow", "设置保存路径"))
        self.OpenSaveButton.setText(_translate("SettingWindow", "打开保存位置"))
        self.QueryHistoryButton.setText(_translate("SettingWindow", "查看下载历史"))
        self.QueryApiButton.setText(_translate("SettingWindow", "自动配置webdriver"))

    def configWebdriver(self):
        """自动更新webdriver"""
        showTk(1, '警告', '自动配置已开始,窗口未响应为正常状况')
        auto = autoWebdriver('edge', 'browserDriver/')
        result = auto.queryEdgeVersion()
        if result == True:
            # 浏览器版本查询成功
            auto.updateEdgeUrl()
            result = auto.downloadWebdriver()
            if result:
                # 下载成功
                print('Edge Webdriver下载成功')
                status = auto.extractZip()
                if status:
                    showTk(0, '信息', '配置成功,祝贺祝贺^_^')
                else:
                    showTk(2, '错误', 'edge文件名或压缩包目录结构变化,请手动配置,压缩包已下载到browserDriver文件夹')
            elif not result:
                # 下载失败
                showTk(2, '错误', 'Edge Webdriver下载过程失败')
        elif result == 'FileNotFound':
            # xml数据文件未找到
            showTk(2, '错误', 'Edge版本文件未找到,请更新至最新版或联系作者')

    def query_history(self):
        """查看历史"""
        def query_history_th_f():
            call('notepad.exe history.txt', creationflags=CREATE_NO_WINDOW)
        query_history_th = Thread(target=query_history_th_f, daemon=True)
        query_history_th.start()

    def open_save(self):
        """打开保存位置"""
        save_path = self.config['save_path']
        while '/' in save_path:
            save_path = save_path.replace('/','\\')
        call(f'explorer.exe {save_path}')

    def set_save(self):
        """设置保存位置"""
        root = Tk()
        root.withdraw()
        root.iconbitmap('img/icon.ico')
        ask = askdirectory(title='选择保存位置')
        if ask != '':
            update_config('d/config/settings.json', 'save_path', ask)
            self.config['save_path'] = ask
            self.textBrowser.clear()
            self.textBrowser.append(ask)
            if not exists(ask + '/tmp'):
                mkdir(ask + '/tmp')

app = QtWidgets.QApplication(sys.argv)
SettingWindow = QtWidgets.QWidget()
with open('style.qss') as f:
    style = f.read()
SettingWindow.setStyleSheet(style)
ui = Ui_SettingWindow()
ui.setupUi(SettingWindow)